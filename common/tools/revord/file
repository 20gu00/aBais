::::往往是监听自身
create database k8s_abais charset utf8mb4;
配置文件热加载,但是如果使用配置的操作没有"重启"是无效的
map slice chan(nil的map不能直接使用)
(new一般结构体指针)
for range 表达式和return返回值都是先求值


token无状态管理的认证模式更好,服务端不用存储数据了
jwt json web token标准,特别适用于分布式站点的单点登录
头部header 负载payload 签名signature
三部分经过base64编码得到token
非安全
用.串联
头部记录加密算法和token类型(jwt)
负载可以自定义字段,官方提供的字段iss发行人 exp过期时间 sub主题 aud受众 nbf生效时间 iat签发时间 jti编号时间
签名是针对前面两部分签名,防篡改

jwt-go
authorization bear token Token(其实也是header,可以手动写hearder Token: Bear xxx
判断用户是否是登录状态 1.session中能否拿到该用户session 2.请求头中是否有token,token认证
jwt搭配refresh token能够针对token被盗取的问题(需要前端的处理)
jwt属于access token,过期就失效了,一般accesstoken过期时间短语refresh token,当access token过期是,refresh token会获取新的access token,当refresh token也过期那么就要重新登录

基于token实现同一时间只能登陆同一设备
时间维度上看,同一时间只有一个登录(两个浏览器也行)
user_id<->token对应,存储在redis中
请求带的token先判断是否有效,在通过对应该系拿到redis中的token对比(token服务器生成)

c.Next()之前的操作是在Handler执行之前就执行；c.Next()之后的操作是在Handler执行之后再执行；
之前的操作一般用来做验证处理，访问是否允许之类的。之后的操作一般是用来做总结处理，比如格式化输出、响应结束时间，响应时长计算之类的。

GET("/api/k8s/allres", AllRes.GetAllNum)  Handler
.或者r.Get()重复

Cross-Origin Resource Sharing
浏览器的访问 跨域

访问前端服务所处的服务器
CORS是一种机制，该机制使用附加的HTTP header来告诉浏览器，准许运行在一个源上的Web应用访问位于另一不同源选定的资源。 当一个Web应用发起一个与自身所在源（域，协议和端口）不同的HTTP请求时，它发起的即跨源HTTP请求。

var Login login

type login struct {}  简单的方法接收者

query param ?=



token可以不存储在mysql中
gorm:"column: icon_url"`  针对IconUrl这种

一般get请求为form格式，其他请求为json格式(需要结构体的话要定义tag json)

sort包主要针对[]int、[]float64、[]string、以及其他自定义切片的排序。
sort 包 在内部实现了四种基本的排序算法：插入排序（insertionSort）、归并排序（symMerge）、堆排序（heapSort）和快速排序（quickSort）； sort 包会依据实际数据自动选择最优的排序算法。所以我们写代码时只需要考虑实现 sort.Interface 这个类型就可以了。
type Interface interface {
    Len() int           // Len方法返回集合中的元素个数
    Less(i, j int) bool // i>j，该方法返回索引i的元素是否比索引j的元素小
    Swap(i, j int)      // 交换i, j的值
}































json字符串





form和json tag都可以

// 大写,实例化 暴露方法(不用在外部调用初始化方法来实例化对象)
var Secret secret

// 小写,不给支持挎包调用  使用的时候就不用实例化,直接使用上面的实例化对象即可
type secret struct{}




limit 0,10 0-9
yaml  获取:detail  接口:update

bind(shouldBind)检查方法和内容类型以自动选择绑定引擎，根据“内容类型”标头使用不同的绑定，例如：
“application/json”-->json绑定
“application/xml”-->xml绑定
如果Content-Type==“application/JSON”使用JSON或XML作为JSON输入，它将请求的主体解析为JSON。它将json有效载荷解码为指定为指针的结构。如果输入无效，它会写入一个400错误，并在响应中设置Content-Type标头“text/plain”。


form  from-data
新版本默认优先使用vendor,如果有,再go module本地缓存
go build x --mod=mod

SetMaxOpenConns
默认情况下，连接池的最大数量是没有限制的。一般来说，连接数越多，访问数据库的性能越高。但是系统资源不是无限
的，数据库的并发能力也不是无限的。因此为了减少系统和数据库崩溃的风险，可以给并发连接数设置一个上限，这个数值
一般不超过进程的最大文件句柄打开数，不超过数据库服务自身支持的并发连接数，比如1000。
SetMaxIdleConns
理论上maxIdleConns连接的上限越高，也即允许在连接池中的空闲连接最大值越大，可以有效减少连接创建和销毁的次
数，提高程序的性能。但是连接对象也是占用内存资源的，而且如果空闲连接越多，存在于连接池内的时间可能越长。 连接
在经过一段时间后有可能会变得不可用，而这时连接还在连接池内没有回收的话，后续被征用的时候就会出问题。一般建议
maxIdleConns的值为MaxOpenConns的1/2，仅供参考。
SetConnMaxLifetime
设置一个连接被使用的最长时间，即过了一段时间后会被强制回收，理论上这可以有效减少不可用连接出现的概率。当数据
库方面也设置了连接的超时时间时，这个值应当不超过数据库的超时参数值。
工厂模式只看结果,多数用于操作隐私属性,想要使用隐私属性,就必须按照指定的方法
go的字符串不能用''
// 初始化
	kubeMap := map[string]string{}
	json.Unmarshal([]byte(config.Config.KubeConfigs), kubeMap)
	// 先是kubeMap 左值仅一次创建
	for idx, _ := range kubeMap {
		// 直接用值
		go func() {
			service.Event.WatchEventTask(idx)
		}()
	}
	go func() {
		service.Event.WatchEventTask("TST-1")
	}()

